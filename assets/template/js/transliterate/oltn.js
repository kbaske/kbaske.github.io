// --- 1) Practical default mapping ---
// This mapping is intentionally conservative and editable in the UI.

// Special modifications as per P.O. Bodding
// Exceptions mapping (multi-character first)
const exceptions = {
  // add more here...
  // Six letters combinations...
  ·±µ·±Æ·±µ·±∑·±ü·±®: "beÃ†bhar",
  ·±µ·±Æ·±£·±¶·±ü·±®: "beÃ†ohar",
  // Five letters combinations...
  //"·±ü·±£·±§·±≠·±ü": "aoia",
  // Four letters combinations...
  //"·±°·±§·±≠·±≥": "Jio",
  // Three letters combinations...
  //"·±ü·±≠·±Æ": "ae",
  // Two letters combinations...
  //"·±ü·±£": "ao", //"": "",
  // One letters combinations...
  ·±Æ·±π: "e", //, "": "",
};

// It handles single letters and common two-char aspirates (consonant + ·±∑).
const DEFAULT_MAP = {
  // Independent & vowel signs (simple ASCII forms)
  ·±ö: "oÃ†", // OÃ† (indep.)
  ·±ü: "a", // A
  ·±§: "i", // I (indep.)
  ·±©: "u", // U (indep.)
  ·±Æ: "e", // E (indep.)
  ·±≥: "o", // OO (indep.)

  // Core consonants
  ·±õ: "t",
  ·±ú: "g",
  ·±ù: "nÃá",
  ·±û: "l",
  ·±†: "k",
  ·±°: "j",
  ·±¢: "m",
  ·±£: "w",
  ·±•: "s",
  ·±¶: "h",
  ·±ß: "≈Ñ",
  ·±®: "r",
  ·±™: "c",
  ·±´: "d",
  ·±¨: "nÃ£",
  ·±≠: "y",
  ·±Ø: "p",
  ·±∞: "·∏ç",
  ·±±: "n",
  ·±≤: "rÃ£",
  ·±¥: "·π≠",
  ·±µ: "b",
  ·±∂: "ÃÉo",
  ·±∑: "h",

  // Common two-character aspirates (consonant + ·±∑)
  ·±†·±∑: "kh",
  ·±ú·±∑: "gh",
  ·±™·±∑: "ch",
  ·±°·±∑: "jh",
  ·±¥·±∑: "·π≠h",
  ·±∞·±∑: "·∏çh",
  ·±õ·±∑: "th",
  ·±´·±∑: "dh",
  ·±Ø·±∑: "ph",
  ·±µ·±∑: "bh",
  ·±±·±∑: "nh",
  ·±≤·±∑: "rÃ£h",
  ·±≠·±∑: "yh",

  // Numbers
  "·±ë": "1",
  "·±í": "2",
  "·±ì": "3",
  "·±î": "4",
  "·±ï": "5",
  "·±ñ": "6",
  "·±ó": "7",
  "·±ò": "8",
  "·±ô": "9",
  "·±ê": "0",

  // Diacritics sometimes typed as letters in plain text; keep practical values
  ·±∏: "ÃÉ", // nasal/length mark often used as o-like
  ·±π: "Ã£", // vowel sign-like usage in plain text
  ·±∫: "Ã£ÃÉ", // mu-gahla at A
  ·±ª: "", // ai mark in plain text
  ·±Ω: "", // ohod
  ·±º: "", // farka
  "·±æ": ".", // full stop mark
  "·±ø": ".", // double full stop mark

  // Space-like marks (map to space)
  "\u200c": "", // ZWNJ
  "\u200d": "", // ZWJ
};

const FOLLOWER_SET = new Set(["·±ö", "·±ü", "·±§", "·±©", "·±Æ", "·±≥", "·±Ω", "·±∑"]);

// NOTE: If you need a stricter academic scheme (e.g., ISO-like with diacritics),
// simply edit the mapping in the UI below and click "Apply changes".
// --- 2) Conversion engine ---
function transliterate(text, map) {
  let out = "";

  // Apply exceptions first
  for (let key in exceptions) {
    const regex = new RegExp(key, "g");
    text = text.replace(regex, exceptions[key]);
  }

  for (let i = 0; i < text.length; i++) {
    const ch = text[i];
    const next = text[i + 1];

    // ‚ú® Special rule
    if (
      (ch === "·±ú" || ch === "·±°" || ch === "·±´" || ch === "·±µ") &&
      !FOLLOWER_SET.has(next)
    ) {
      if (ch === "·±ú") out += "·∏±";
      else if (ch === "·±°") out += "ƒá";
      else if (ch === "·±´") out += "tÃÅ";
      else if (ch === "·±µ") out += "·πï";
    } else {
      // Default mapping
      out += DEFAULT_MAP[ch] !== undefined ? DEFAULT_MAP[ch] : ch;
    }
  }

  // Remove spaces before punctuation marks: . ! ? ·±æ ·±ø
  out = out.replace(/\s+(?=[.!?·±æ·±ø])/g, "");

  return out;
}

// üîπ Special Y/W vowel adjustment
function adjustYWVowels(s) {
  return s
    .replace(/([a·∫°√£·∫°ÃÉe·∫Ω·∫ΩÃ†ƒìiƒ©o√µ√µÃ†oÃ†≈çu≈©aÃ£aÃÉa.ÃÉeÃÉeÃÑeÃ±eÃ±ÃÉiÃÉoÃÉoÃ±oÃ±ÃÉoÃÑuÃÉ])([yw])/gi, (m, v, w) => {
      if (w.toLowerCase() === "y") return v + "e";
      if (w.toLowerCase() === "w") return v + "o";
      return m;
    })
    .replace(/([yw])([a·∫°√£·∫°ÃÉe·∫Ω·∫ΩÃ†ƒìiƒ©o√µ√µÃ†oÃ†≈çu≈©aÃ£aÃÉa.ÃÉeÃÉeÃÑeÃ±eÃ±ÃÉiÃÉoÃÉoÃ±oÃ±ÃÉoÃÑuÃÉ])/gi, (m, w, v) => {
      if (w.toLowerCase() === "y") return "e" + v;
      if (w.toLowerCase() === "w") return "o" + v;
      return m;
    })
    .replace(/ee/gi, "e")
    .replace(/oo/gi, "o")
    .replace(/ie/gi, "i")
    .replace(/ei/gi, "i");
}

function normalizeSpaces(s) {
  // Collapse multiple spaces, keep newlines; trim edges per line
  return s
    .split(/\n/)
    .map((line) => line.replace(/\s{2,}/g, " ").trim())
    .join("\n");
}

function capitalizeSentences(s) {
  // Capitalize first a-z after start or after ., ?, ! possibly followed by spaces and quotes/brackets
  return s.replace(
    /(^|[.?!]\s+)([\"'‚Äú‚Äò\(\[\{]*)([a-z])/g,
    (m, p1, p2, p3) => p1 + p2 + p3.toUpperCase()
  );
}

// --- 3) Wire up UI ---
const $in = document.getElementById("input");
const $out = document.getElementById("output");
const $live = document.getElementById("liveToggle");
const $cap = document.getElementById("capitalizeToggle");
const $trim = document.getElementById("trimSpacesToggle");
const $convert = document.getElementById("convertBtn");
const $clear = document.getElementById("clearBtn");
const $copy = document.getElementById("copyBtn");
const $download = document.getElementById("downloadBtn");
const $mapJson = document.getElementById("mapJson");
const $applyMap = document.getElementById("applyMapBtn");

let currentMap = { ...DEFAULT_MAP };
$mapJson.textContent = `We are Santals.in ‚Äî a community-driven platform dedicated to preserving and promoting Santali language, culture, and literature.
`;

function convertNow() {
  let text = transliterate($in.value, currentMap);

  // üîπ Apply Y/W vowel rule
  text = adjustYWVowels(text);

  if ($trim.checked) text = normalizeSpaces(text);
  // lowercase whole text first to ensure stable capitalization result
  text = text.replace(/[A-Z]/g, (ch) => ch.toLowerCase());
  if ($cap.checked) text = capitalizeSentences(text);
  $out.value = text;
}

$convert.addEventListener("click", convertNow);
$in.addEventListener("input", () => {
  if ($live.checked) convertNow();
});
$live.addEventListener("change", () => {
  if ($live.checked) convertNow();
});
$cap.addEventListener("change", convertNow);
$trim.addEventListener("change", convertNow);
$clear.addEventListener("click", () => {
  $in.value = "";
  convertNow();
  $in.focus();
});

$copy.addEventListener("click", async () => {
  await navigator.clipboard.writeText($out.value || "");
  $copy.textContent = "Copied!";
  setTimeout(() => ($copy.textContent = "Copy"), 900);
});

$download.addEventListener("click", () => {
  const blob = new Blob([$out.value || ""], {
    type: "text/plain;charset=utf-8",
  });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "olchiki-to-latin.txt";
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
});

$applyMap.addEventListener("click", () => {
  window.open("https://santals.in", "_blank");
});

// Initial convert on load
convertNow();
